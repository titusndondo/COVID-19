?cor
?ggcorr
??ggcorr
expand.grid(
nrounds = 1000,
eta = c(0.1, 0.05, 0.01),
max_depth = c(2, 3, 4, 5, 6),
gamma = 0,
colsample_bytree=1,
min_child_weight=c(1, 2, 3, 4 ,5),
subsample=1
)
expand.grid(
nrounds = 1000,
eta = c(0.1, 0.05, 0.01),
max_depth = c(2, 3, 4, 5, 6),
gamma = 0,
colsample_bytree=1,
min_child_weight=4,
subsample=1
)
data.frame(nrounds = 1000,
max_depth = 3,
eta = 0.05,
colsample_bytree = 1,
min_child_weight = 4,
subsample = 1,
gamma = 0)
combn(1:57, 2, paste, collapse="V")
paste("Inter.V", combn(1:57, 2, paste, collapse="V"), sep="")
install.packages("AppliedPredictiveModeling")
FV <- PMT * ((((1 + i) ^ n) - 1) / i)
investment <- function(PMT, n, i) {
FV <- PMT * ((((1 + i) ^ n) - 1) / i)
}
investment(1000, 5, 0.05)
investment <- function(PMT, n, i) {
FV <- PMT * ((((1 + i) ^ n) - 1) / i)
return(FV)
}
investment(1000, 5, 0.05)
investment_2 <- function(PMT, n, i) {
g = 0.5 / 2
FV <- PMT * ((((1 + i) ^ n) - ((1 + g) ^ n)) / (i - g))
return(FV)
}
investment_2(2000, 5, 0.03)
investment_2 <- function(PMT, n, i) {
g = 0.5
FV <- PMT * ((((1 + i) ^ n) - ((1 + g) ^ n)) / (i - g))
return(FV)
}
investment_2(2000, 5, 0.03)
investment_2 <- function(PMT, n, i) {
g = 0.05
FV <- PMT * ((((1 + i) ^ n) - ((1 + g) ^ n)) / (i - g))
return(FV)
}
investment_2(2000, 5, 0.03)
investment_2 <- function(PMT, n, i) {
g = 0.5 / 2
FV <- PMT * ((((1 + i) ^ n) - ((1 + g) ^ n)) / (i - g))
return(FV)
}
investment_2(15000, 30, 0.1045)
investment_2(15000, 30, 0.1045) == 1954935238.47
investment_2(2000, 5, 0.03)
investment_2 <- function(PMT, n, i) {
g = 0.5
FV <- PMT * ((((1 + i) ^ n) - ((1 + g) ^ n)) / (i - g))
return(FV)
}
investment_2(15000, 30, 0.1045) == 1954935238.47
investment_2(15000, 30, 0.1045)
investment_2 <- function(PMT, n, i) {
g = 1
FV <- PMT * ((((1 + i) ^ n) - ((1 + g) ^ n)) / (i - g))
return(FV)
}
investment_2(15000, 30, 0.1045) == 1 954 935 238.47
investment_2(15000, 30, 0.1045) == 1 954 935 238.47
investment_2(15000, 30, 0.1045)
investment_2(15000, 30, 0.1045) == 1 954 935 238.47
investment_2(15000, 30, 0.1045) == 1954935238.47
investment_2(15000, 30, 0.1045) >= 1954935238.47
investment_2 <- function(PMT, n, i) {
g = 0.25
FV <- PMT * ((((1 + i) ^ n) - ((1 + g) ^ n)) / (i - g))
return(FV)
}
investment_2(2000, 5, 0.03)
investment_2(15000, 30, 0.1045) >= 1954935238.47
investment_2(15000, 30, 0.1045) <= 1954935238.47
investment_2 <- function(PMT, n, i) {
g = 0.3
FV <- PMT * ((((1 + i) ^ n) - ((1 + g) ^ n)) / (i - g))
return(FV)
}
investment_2(15000, 30, 0.1045) >= 1954935238.47
investment_2 <- function(PMT, n, i) {
g = 0.4
FV <- PMT * ((((1 + i) ^ n) - ((1 + g) ^ n)) / (i - g))
return(FV)
}
investment_2(15000, 30, 0.1045) >= 1954935238.47
investment_2 <- function(PMT, n, i) {
g = 0.5
FV <- PMT * ((((1 + i) ^ n) - ((1 + g) ^ n)) / (i - g))
return(FV)
}
investment_2(2000, 5, 0.03)
investment_2(15000, 30, 0.1045) >= 1954935238.47
investment <- function(PMT, n, i) {
investment_balance <- 0
for(j in seq_along(n)) {
interest <- i * investment_balance
investment_balance <- investment_balance + interest
investment_balance <- PMT
}
return(investment_balance)
}
investment(20000, 0.1, 15)
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
seq_along(n)
1:n
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
for(j in 1:n) {
interest <- i * investment_balance
investment_balance <- investment_balance + interest
###at the end of the first year
investment_balance <- PMT
}
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
for(j in 1:n) {
interest <- i * investment_balance
investment_balance <- investment_balance + interest
###at the end of the first year
investment_balance <- investment_balance + PMT
}
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
for(j in 1:n) {
interest <- i * investment_balance
investment_balance <- investment_balance + interest
###at the end of the first year
investment_balance <- investment_balance + (PMT * 2)
}
3 % 2
3 %% 2
7 %% 2
6 %% 2
j <- 13
if((j %% 2) == 0) {
print("Yes")
} else {
print("No")
}
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
for(j in 1:n) {
interest <- i * investment_balance
investment_balance <- investment_balance + interest
###at the end of the first year
investment_balance <- investment_balance + PMT
}
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
for(j in 1:n) {
#earn interest throughout the year
interest <- i * investment_balance
#collect the interest
investment_balance <- investment_balance + interest
###make the investment/reinvestment
investment_balance <- investment_balance + PMT
}
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
for(j in 1:n) {
#earn interest throughout the year
interest <- i * investment_balance
#collect the interest
investment_balance <- investment_balance + interest
annuity <- PMT
###make the investment/reinvestment
investment_balance <- investment_balance + annuity
}
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
for(j in 1:n) {
#earn interest throughout the year
interest <- i * investment_balance
#collect the interest
investment_balance <- investment_balance + interest
annuity <- (PMT) ^ j
###make the investment/reinvestment
investment_balance <- investment_balance + annuity
}
investment_balance <- 0
interest <- 0.1 * investment_balance
investment_balance <- investment_balance + interest
annuity <- PMT
investment_balance <- investment_balance + annuity
PMT <- annuity
interest <- 0.1 * investment_balance
investment_balance <- investment_balance + interest
annuity <- PMT
investment_balance <- investment_balance + annuity
PMT <- annuity
interest <- 0.1 * investment_balance
investment_balance <- investment_balance + interest
annuity <- PMT
investment_balance <- investment_balance + annuity
PMT <- annuity
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
interest <- 0.1 * investment_balance
investment_balance <- investment_balance + interest
annuity <- PMT
investment_balance <- investment_balance + annuity
(1 %% 2)
if((1 %% 2) == 0) {
PMT <- annuity ^ 2
} else {
PMT <- annuity
}
interest <- 0.1 * investment_balance
#collect the interest
investment_balance <- investment_balance + interest
annuity <- PMT
investment_balance <- investment_balance + annuity
if((2 %% 2) == 0) {
PMT <- annuity ^ 2
} else {
PMT <- annuity
}
annuity
PMT
PMT
PMT * 10
PMT * 100
PMT * 1000
PMT / 10
PMT / 100
PMT / 1000
PMT
4 * exp(0.8)
(2 %% 2)
annuity ^ 2
20000 ^ 2
20000 * 20000
annuity / 20000
PMT / 20000
interest <- 0.1 * investment_balance
investment_balance <- investment_balance + interest
annuity <- PMT
investment_balance <- investment_balance + annuity
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
interest <- 0.1 * investment_balance
investment_balance <- investment_balance + interest
annuity <- PMT
investment_balance <- investment_balance + annuity
if((1 %% 2) == 0) {
PMT <- annuity * 2
} else {
PMT <- annuity
}
if(((1 + 1) %% 2) == 0) {
PMT <- annuity * 2
} else {
PMT <- annuity
}
interest <- 0.1 * investment_balance
investment_balance <- investment_balance + interest
annuity <- PMT
investment_balance <- investment_balance + annuity
if(((2 + 1) %% 2) == 0) {
PMT <- annuity * 2
} else {
PMT <- annuity
}
PMT <- 20000
i = 0.1
n = 15
investment_balance <- 0
for(j in 1:n) {
#earn interest throughout the year
interest <- i * investment_balance
#collect the interest
investment_balance <- investment_balance + interest
annuity <- PMT
#make the investment/reinvestment
investment_balance <- investment_balance + annuity
#update payment
if(((j + 1) %% 2) == 0) {
PMT <- annuity * 2
} else {
PMT <- annuity
}
}
PMT <- 15000
i = 0.1045
n = 30
investment_balance <- 0
for(j in 1:n) {
#earn interest throughout the year
interest <- i * investment_balance
#collect the interest
investment_balance <- investment_balance + interest
annuity <- PMT
#make the investment/reinvestment
investment_balance <- investment_balance + annuity
#update payment
if(((j + 1) %% 2) == 0) {
PMT <- annuity * 2
} else {
PMT <- annuity
}
}
investment <- function(PMT, n, i) {
investment_balance <- 0
for(j in 1:n) {
#earn interest throughout the year
interest <- i * investment_balance
#collect the interest
investment_balance <- investment_balance + interest
annuity <- PMT
#make the investment/reinvestment
investment_balance <- investment_balance + annuity
#update payment
if(((j + 1) %% 2) == 0) {
PMT <- annuity * 2
} else {
PMT <- annuity
}
}
}
investment <- function(PMT, n, i) {
investment_balance <- 0
for(j in 1:n) {
#earn interest throughout the year
interest <- i * investment_balance
#collect the interest
investment_balance <- investment_balance + interest
annuity <- PMT
#make the investment/reinvestment
investment_balance <- investment_balance + annuity
#update payment
if(((j + 1) %% 2) == 0) {
PMT <- annuity * 2
} else {
PMT <- annuity
}
}
return(investment_balance)
}
investment(15000, 30, 0.1045)
investment(10000, 40, 0.1045)
investment(10000, 40, 0.1045)
investment(15000, 30, 0.1045)
investment <- function(PMT, n, i) {
investment_balance <- 0
for(j in 1:n) {
#earn interest throughout the year
interest <- i * investment_balance
#collect the interest
investment_balance <- investment_balance + interest
annuity <- PMT
#make the investment
investment_balance <- investment_balance + annuity
#update payment
if(((j + 1) %% 2) == 0) {
PMT <- annuity * 2
} else {
PMT <- annuity
}
}
return(investment_balance)
}
investment(15000, 30, 0.1045)
rm(list = ls())
investment <- function(PMT, n, i) {
investment_balance <- 0
for(j in 1:n) {
#earn interest throughout the year
interest <- i * investment_balance
#collect the interest
investment_balance <- investment_balance + interest
annuity <- PMT
#make the investment
investment_balance <- investment_balance + annuity
#update payment
if(((j + 1) %% 2) == 0) {
PMT <- annuity * 2
} else {
PMT <- annuity
}
}
return(investment_balance)
}
investment(15000, 30, 0.1045)
rm(list = ls())
install.packages("mlr")
install.packages("mlr3")
install.packages("h2o")
install.packages("h2o")
rm(list = ls())
install.packages(c("png", "1.0-7"))
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
install.packages("reticulate")
import pandas as pd
reticulate::repl_python()
Yes
reticulate::repl_python()
import pandas as pd
reticulate::repl_python()
import pandas as pd
library(reticulate)
reticulate::repl_python()
import pandas as pd
library(reticulate)
import pandas as pd
install.packages("fpp2")
setwd("C:/Users/tbndo/Google Drive/Projects/COVID-19")
library(tidyverse)
library(magrittr)
library(ggrepel)
library(plotly)
df = read_csv("covid19_data.csv")
df
cols = c('#8B4513', '#A0522D', '#D2691E',
'#CD853F', '#F4A460', '#DEB887',
'#D2B48C', '#BC8F8F', '#FFE4B5',
'#FFDAB9', '#FFE4E1', '#FAF0E6')
theme_set(
theme_light()
)
df %>%
select(Date, Day, Province, 'Cases by Province') %>%
group_by(Province) %>%
mutate(cumul_sum = cumsum(`Cases by Province`)) ->
cases_by_province
cases_by_province %>%
ungroup() %>%
mutate(Province = factor(Province,
levels = c('Gauteng', 'Western Cape', 'KwaZulu Natal', 'Unknown',
'Freestate', 'Mpumalanga', 'Limpopo', 'Eastern Cape',
'North West', 'Northern Cape'))) %>%
ggplot(aes(Day, cumul_sum, color = Province)) +
geom_point() +
geom_line() +
geom_text_repel(aes(label = Province),
data = cases_by_province %>% filter(Day == max(Day)),
hjust = -.5, vjust = -1) +
theme(
legend.position = 'right'
) +
labs(
x = 'Day', y = 'Number of infections', title = 'Anatomy of COVID-19 in South African Provinces'
) +
scale_x_continuous(breaks = c(-1:30), limits = c(-1, 22)) +
scale_y_continuous(breaks = seq(0, 450, 50)) +
scale_color_brewer(palette = "RdYlBu", direction = -1)
cases_by_province %>%
ungroup() %>%
mutate(Province = factor(Province,
levels = c('Gauteng', 'Western Cape', 'KwaZulu Natal', 'Unknown',
'Freestate', 'Mpumalanga', 'Limpopo', 'Eastern Cape',
'North West', 'Northern Cape'))) %>%
ggplot(aes(Day, cumul_sum, color = Province)) +
geom_point() +
geom_line() +
geom_text_repel(aes(label = Province),
data = cases_by_province %>% filter(Day == max(Day)),
hjust = -.5, vjust = -1) +
theme(
legend.position = 'right'
) +
labs(
x = 'Day', y = 'Number of infections', title = 'Anatomy of COVID-19 in South African Provinces'
) +
scale_x_continuous(breaks = c(-1:45), limits = c(-1, 45)) +
scale_y_continuous(breaks = seq(0, 450, 50)) +
scale_color_brewer(palette = "RdYlBu", direction = -1)
